version: '3.7'

# 挂载
volumes:
  composer-data56:
  composer-data71:
  composer-data72:
  composer-data73:
  portainer_data:

networks:
  app_net:
    driver: bridge
  walle-net:
    driver: bridge

services:
  mysql57:
    container_name: mysql57
    hostname: mysql57
    build: $PWD/mysql5.7
    restart: always
    volumes:
      - $PWD/mysql5.7/mysql.conf.d/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf
      - /srv/dockerData/mysql:/var/lib/mysql
    privileged: true
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL57_INIT_PASSWORD}
    ports:
      - ${MYSQL57_PORT}:3306
    command: [
      '--character-set-server=utf8mb4',
      '--collation-server=utf8mb4_unicode_ci',
      '--sql-mode=NO_ENGINE_SUBSTITUTION'
    ]
    networks:
      - app_net

  mysql8:
    container_name: mysql8
    hostname: mysql8
    build: $PWD/mysql8
    restart: always
    volumes:
      - /srv/dockerData/mysql8:/var/lib/mysql
    privileged: true
    environment:
      MYSQL_ROOT_PASSWORD: 123456
    ports:
      - ${MYSQL8_PORT}:3306
    command: [
      '--default-authentication-plugin=mysql_native_password',
      '--character-set-server=utf8mb4',
      '--collation-server=utf8mb4_unicode_ci',
      '--sql-mode=NO_ENGINE_SUBSTITUTION'
    ]
    networks:
      - app_net

  php56:
    container_name: php56
    hostname: php56
    build: $PWD/php5.6
    restart: always
    volumes:
      - /srv/web/www:/srv/web/www
      - /srv/web/logs:/srv/web/logs
      - $PWD/php5.6/php.ini:/usr/local/etc/php/php.ini
      - composer-data56:/composer56
    privileged: true
    working_dir: /srv/web/www
    links:
      - mysql57
      - redis4
    depends_on:
      - mysql57
      - redis4
    networks:
      - app_net

  php71:
    container_name: php71
    hostname: php71
    build: $PWD/php7.1
    restart: always
    volumes:
      - /srv/web/www:/srv/web/www
      - /srv/web/logs:/srv/web/logs
      - $PWD/php7.1/php.ini:/usr/local/etc/php/php.ini
      - composer-data71:/composer71
    privileged: true
    working_dir: /srv/web/www
    links:
      - mysql57
      - redis4
    depends_on:
      - mysql57
      - redis4
    networks:
      - app_net

  php72:
    container_name: php72
    hostname: php72
    build: $PWD/php7.2
    restart: always
    volumes:
      - /srv/web/www:/srv/web/www
      - /srv/web/logs:/srv/web/logs
      - $PWD/php7.2/php.ini:/usr/local/etc/php/php.ini
      - composer-data72:/composer72
    privileged: true
    working_dir: /srv/web/www
    links:
      - mysql57
      - redis4
    depends_on:
      - mysql57
      - redis4
    networks:
      - app_net

  php73:
    container_name: php73
    hostname: php73
    build: $PWD/php7.3
    restart: always
    volumes:
      - /srv/web/www:/srv/web/www
      - /srv/web/logs:/srv/web/logs
      - $PWD/php7.3/php.ini:/usr/local/etc/php/php.ini
      - composer-data73:/composer73
    privileged: true
    working_dir: /srv/web/www
    links:
      - mysql57
      - redis4
    depends_on:
      - mysql57
      - redis4
    networks:
      - app_net

  nginx:
    container_name: nginx
    hostname: nginx
    build: $PWD/nginx
    restart: always
    volumes:
      - /srv/web/www:/srv/web/www
      - $PWD/nginx/conf.d:/etc/nginx/conf.d
      - $PWD/nginx/nginx.conf:/etc/nginx/nginx.conf
      - /srv/letsencrypt:/srv/letsencrypt
    privileged: true
    ports:
      - ${NGINX_PORT}:80
      - ${NGINX_SSL_PORT}:443
    networks:
      - app_net

  redis4:
    container_name: redis4
    hostname: redis4
    build: $PWD/redis4.0
    restart: always
    command:
      - --appendonly yes
      - --requirepass ${REDIS_PASSWORD}
    volumes:
      - /srv/dockerData/redis:/data
    privileged: true
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - app_net

  mongo:
    container_name: mongo3.4
    hostname: mongo
    image: mongo:3.4
    restart: always
    volumes:
      - /srv/dockerData/mongodbData:/data/db
    privileged: true
    ports:
      - ${MONGO_PORT}:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INIT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INIT_PASSWORD}
    networks:
      - app_net

  portainer:
    container_name: portainer
    hostname: portainer
    image: portainer/portainer
    command: -H unix:///var/run/docker.sock
    restart: always
    privileged: true
    ports:
      - ${PORTAINER_PORT}:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - app_net

  walle:
    image: alenx/walle-web:2.1
    container_name: walle
    hostname: walle
    ports:
      # 如果宿主机80端口被占用，可自行修改为其他port(>=1024)
      # 0.0.0.0:要绑定的宿主机端口:docker容器内端口80
      - ${WALLE_PORT}:80
    depends_on:
      - python
    networks:
      - walle-net
    restart: always

  python:
    image: alenx/walle-python:2.1
    container_name: walle-python
    hostname: walle-python
    environment:
      - MYSQL_USER=${WALLE_USER}
      - MYSQL_PASSWORD=${WALLE_PASSWORD}
      - MYSQL_DATABASE=${WALLE_DB_NAME}
      - MYSQL_ROOT_PASSWORD=${WALLE_ROOT_PASSWORD}
      - MYSQL_HOST=${WALLE_DB_HOST}
      - MYSQL_PORT=${WALLE_DB_PORT}
    command: bash -c "cd /opt/walle_home/ && /bin/bash admin.sh migration &&  python waller.py"
    expose:
      - "5000"
    volumes:
      - /srv/dockerData/walle_home/plugins/:/opt/walle_home/plugins/
      - /srv/dockerData/walle_home/codebase/:/opt/walle_home/codebase/
      - /srv/dockerData/walle_home/logs/:/opt/walle_home/logs/
      - /root/.ssh:/root/.ssh/
    networks:
      - app_net
      - walle-net
    restart: always